" vim wants a posix compatible shell
if $SHELL =~ 'bin/fish'
  set shell=/bin/sh
endif

" helper for the color script
if &term == 'xterm' || &term =~? '^screen'
  set t_Co=256
  let g:CSApprox_konsole = 1
endif

" nice colorscheme
colorscheme torte

" reset some stuff
set nocompatible

" new leader
let mapleader = ","

" magic indent plugin for many languages
filetype indent plugin on

" syntax highlighting
syntax on

" initialize pathogen
call pathogen#infect()

" toggle wrapping with F10
" TODO: find out how ugly this really is
function! WrapToggle()
  if g:wrapped
    let g:wrapped = 0
    set textwidth=0
  else
    let g:wrapped = 1
    set textwidth=80
  endif
endfunction
let g:wrapped = 0
map <F10> :call WrapToggle()<CR>
imap <F10> :call WrapToggle()<CR>

" C / C++
" gates for header
function! s:insert_gates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename . " "
  execute "normal! Go#endif /* " . gatename . " */"
  normal! kk
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

" python
au FileType python setlocal shiftwidth=4 tabstop=4 smarttab expandtab softtabstop=4

" vimrc (meta :D)
au FileType vim setlocal shiftwidth=2 tabstop=2 smarttab expandtab softtabstop=2

" haml (meta :D)
au FileType haml setlocal shiftwidth=2 tabstop=2 smarttab expandtab softtabstop=2

" latex
au FileType plaintex setlocal shiftwidth=2 tabstop=2 smarttab expandtab softtabstop=2

" js the way i want it
au FileType javascript setlocal shiftwidth=4 tabstop=4 smarttab expandtab softtabstop=4

" coffee script
au FileType coffee setlocal shiftwidth=2 tabstop=2 smarttab expandtab softtabstop=2

" ruby
au FileType ruby setlocal shiftwidth=2 tabstop=2 smarttab expandtab softtabstop=2

" brainfuck
au BufRead,BufNewFile *.bf setfiletype brainfuck

" json
au BufRead,BufNewFile *.json setfiletype json

" qt style sheets (looks like css ;) )
au BufRead,BufNewFile *.qss setfiletype css

" toggle paste option
set pastetoggle=<F11>

" funny cmd completion
set wildmenu

" highlight search results
set hlsearch
" and <C-?> (aka Ctrl+Shift+/ on my layout) removes the highlighting
nnoremap <silent> <C-?> :nohl<CR><C-?>

" always show statusbar
set laststatus=2

" kind of clever case (all small letters => ignore case)
set ignorecase
set smartcase

" hopping search
set incsearch

" keeping context by scrolling too early ;)
set scrolloff=2

" Tag-List
map <leader>T :TlistToggle<CR><C-W>h

" Doxygen
map <C-D> :Dox<CR>
imap <C-D> <ESC>:Dox<CR>

" gundo
nnoremap <F5> :GundoToggle<CR>

" MiniBufExplorer
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" don't close hidden buffers
set hidden

" find trailing whitespaces
set listchars=tab:>-,trail:Â·,eol:$
nmap <silent> <leader>s :set nolist!<CR>

" Commant-T
set wildignore+=build,test,out,*.o,*.d,.git

